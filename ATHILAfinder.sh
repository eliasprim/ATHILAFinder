# ATHILAFinder MASTER SCRIPT 

# REQUIRED SOFTWARE: Vmatch, BEDTools, BLAST, EMBOSS, HMMER

# REQUIRED PROGRAMMING LANGUAGES: R, Python, Perl, Awk

# FOR R SCRIPTS NEED TO INSTALL THE FOLLOWING PACKAGES: Biostrings, data.table, dplyr, plyranges, seqinr, stringr, tibble, tidyr 

# FOR PYTHON SCRIPTS NEED TO INSTALL THE FOLLOWING PACKAGES: sys, regex, from itertools import groupby, from Bio import SeqIO, from Bio.SeqRecord import SeqRecord

echo "Assembly: $1";

echo "Searching Regions (bedtools window): $2";

echo "Minimum Internal Length: $3";

echo "Maximum Internal Length: $4";

echo "Extend Internal: $5";

echo "Length of Start/End Oligomers: $6";

echo "Mismatches of Start/End Oligomers: $7";

echo "Minimum LTR Length: $8";

echo "Maximum LTR Length: $9";

echo "Species code: ${10}";

echo "BLAST FULL-LENGTH Coverage (Minimum value): ${11}";

echo "BLAST Minimum Signature Coordinate: ${12}"

echo "BLAST Maximum Signature Coordinate: ${13}"

echo "BLAST PBS Signature Mismatches: ${14}"

echo "BLAST PPT Signature Mismatches: ${15}"

echo "Mismatches of Start/End Oligomers BLAST: ${16}";

echo "BLAST SOLO-LTR Coverage (Minimum value): ${17}";

echo "ORF HMM DATABASE: ${18}";

echo "HMMSCAN E-VALUE: ${19}";


# STEP 1: RUN VMATCH TO FIND THE PBS AND PPT JUNCTIONS

mkvtree -dna -pl -allout -v -db $1

vmatch -q inputs/ATHILA_PBSjunction -complete -h 3 -d -p -s -v -showdesc 100 -noevalue -noidentity -noscore $1 > $1.PBS.vmatch

vmatch -q inputs/ATHILA_PPTjunction -complete -h 3 -d -p -s -v -showdesc 100 -noevalue -noidentity -noscore $1 > $1.PPT.vmatch

echo "STEP 1: DONE";

# STEP 2: PREPARE THE ABOVE VMATCH OUTPUTS FOR THE BEDTOOLS WINDOW STEP 

Rscript scripts/vmatch1_2_bed1.R $1.PBS.vmatch $1.PBS.vmatch_FULL_D.bed $1.PBS.vmatch_FULL_P.bed 

Rscript scripts/vmatch1_2_bed1.R $1.PPT.vmatch $1.PPT.vmatch_FULL_D.bed $1.PPT.vmatch_FULL_P.bed

Rscript scripts/unique_pbs.R $1.PBS.vmatch_FULL_D.bed $1.PBS.vmatch_FULL_D_UNIQUE.bed 

Rscript scripts/unique_pbs.R $1.PBS.vmatch_FULL_P.bed $1.PBS.vmatch_FULL_P_UNIQUE.bed

Rscript scripts/unique_pbs.R $1.PPT.vmatch_FULL_D.bed $1.PPT.vmatch_FULL_D_UNIQUE.bed

Rscript scripts/unique_pbs.R $1.PPT.vmatch_FULL_P.bed $1.PPT.vmatch_FULL_P_UNIQUE.bed

echo "STEP 2: DONE";

# STEP 3: BEDTOOLS WINDOW --> MATCH PBS AND PPT SIGNATURES TO MAKE THE 'PRIMITIVE' INTERNAL DOMAIN OF ATHILA ELEMENTS 

# D 
bedtools window -a $1.PBS.vmatch_FULL_D_UNIQUE.bed -b $1.PPT.vmatch_FULL_D_UNIQUE.bed -l 0 -r $2 > $1.PBS_2_PPT_FULL_D_r10k.txt 

bedtools window -a $1.PBS.vmatch_FULL_D_UNIQUE.bed -b $1.PPT.vmatch_FULL_D_UNIQUE.bed -l 0 -r $2 -v > $1.PBS_2_PPT_FULL_D_r10k_v.txt 

bedtools window -a $1.PPT.vmatch_FULL_D_UNIQUE.bed -b $1.PBS.vmatch_FULL_D_UNIQUE.bed -l $2 -r 0 -v > $1.PPT_2_PBS_FULL_D_l10k_v.txt 

# P 
bedtools window -a $1.PPT.vmatch_FULL_P_UNIQUE.bed -b $1.PBS.vmatch_FULL_P_UNIQUE.bed -l 0 -r $2 > $1.PPT_2_PBS_FULL_P_r10k.txt 

bedtools window -a $1.PPT.vmatch_FULL_P_UNIQUE.bed -b $1.PBS.vmatch_FULL_P_UNIQUE.bed -l 0 -r $2 -v > $1.PPT_2_PBS_FULL_P_r10k_v.txt 

bedtools window -a $1.PBS.vmatch_FULL_P_UNIQUE.bed -b $1.PPT.vmatch_FULL_P_UNIQUE.bed -l $2 -r 0 -v > $1.PBS_2_PPT_FULL_P_l10k_v.txt

echo "STEP 3: DONE";

# STEP 4: PREPARE BED INPUT FOR BEDTOOLS INTERSECT 

Rscript scripts/vmatch1bed2_2_intersect.R $1.PBS_2_PPT_FULL_D_r10k.txt $1.PBS_2_PPT_FULL_D_r10k_v.txt $1.PPT_2_PBS_FULL_D_l10k_v.txt $1.PBS_2_PPT_D_EVERYTHING.txt $1.PBS_2_PPT_D_DISTANCE.txt $3 $4 $1.PBS_2_PPT_D_INTERSECT.bed $1.PBS_2_PPT_D_REJECTED.bed

Rscript scripts/vmatch1bed2_2_intersect.R $1.PPT_2_PBS_FULL_P_r10k.txt $1.PPT_2_PBS_FULL_P_r10k_v.txt $1.PBS_2_PPT_FULL_P_l10k_v.txt $1.PPT_2_PBS_P_EVERYTHING.txt $1.PPT_2_PBS_P_DISTANCE.txt $3 $4 $1.PPT_2_PBS_P_INTERSECT.bed $1.PPT_2_PBS_P_REJECTED.bed

cat $1.PBS_2_PPT_D_EVERYTHING.txt $1.PPT_2_PBS_P_EVERYTHING.txt > $1.PBSPPT_DP_EVERYTHING.txt

cat $1.PBS_2_PPT_D_REJECTED.bed $1.PPT_2_PBS_P_REJECTED.bed > $1.PBSPPT_DP_REJECTED.bed

cat $1.PBS_2_PPT_D_DISTANCE.txt $1.PPT_2_PBS_P_DISTANCE.txt > $1.PBS_PPT_DP_DISTANCE.txt

cat $1.PBS.vmatch_FULL_D_UNIQUE.bed $1.PPT.vmatch_FULL_D_UNIQUE.bed > $1.OLIGOMERS_PBS_N_PPT_FULL_D_INTERSECT.bed 

cat $1.PBS.vmatch_FULL_P_UNIQUE.bed $1.PPT.vmatch_FULL_P_UNIQUE.bed > $1.OLIGOMERS_PBS_N_PPT_FULL_P_INTERSECT.bed 

echo "STEP 4: DONE";

# STEP 5: RUN BEDTOOLS INTERSECT ANALYSIS --> CHECK FOR PBS AND PPT INSIDE THE INTERNAL REGION OF THE ELEMENTS

# D
bedtools intersect -a $1.PBS_2_PPT_D_INTERSECT.bed -b $1.OLIGOMERS_PBS_N_PPT_FULL_P_INTERSECT.bed -wa > $1.INTERSECT_D_2_P.txt

python3 scripts/rmv_intersect.py $1.INTERSECT_D_2_P.txt $1.PBS_2_PPT_D_INTERSECT.bed $1.PBS_2_PPT_D_INTERSECT_NEW.bed

# P
bedtools intersect -a $1.PPT_2_PBS_P_INTERSECT.bed -b $1.OLIGOMERS_PBS_N_PPT_FULL_D_INTERSECT.bed -wa > $1.INTERSECT_P_2_D.txt

python3 scripts/rmv_intersect.py $1.INTERSECT_P_2_D.txt $1.PPT_2_PBS_P_INTERSECT.bed $1.PPT_2_PBS_P_INTERSECT_NEW.bed

cat $1.INTERSECT_D_2_P.txt $1.INTERSECT_P_2_D.txt > $1.INTERSECT_DP_2_PD_REJECTED.bed

cat $1.OLIGOMERS_PBS_N_PPT_FULL_D_INTERSECT.bed $1.OLIGOMERS_PBS_N_PPT_FULL_P_INTERSECT.bed > $1.ALL_OLIGOMERS_PBS_N_PPT_FULL_DP.bed

sort -k1,1V $1.ALL_OLIGOMERS_PBS_N_PPT_FULL_DP.bed > $1.ALL_OLIGOMERS_PBS_N_PPT_FULL_DP_SORTED.bed

cat $1.PBS_2_PPT_D_INTERSECT_NEW.bed $1.PPT_2_PBS_P_INTERSECT_NEW.bed > $1.ALL.PBSPPT_DP_WINDOW2.bed

sort -k1,1V $1.ALL.PBSPPT_DP_WINDOW2.bed > $1.ALL.PBSPPT_DP_WINDOW2_SORTED.bed

echo "STEP 5: DONE";

# STEP 6: BEDTOOLS WINDOW --> CHECK FOR PBS AND PPT OUTSIDE THE INTERNAL REGION -- SPECIFIC RANGE

bedtools window -a $1.ALL.PBSPPT_DP_WINDOW2_SORTED.bed -b $1.ALL_OLIGOMERS_PBS_N_PPT_FULL_DP_SORTED.bed -w 1000 > $1.ALL_PBSPPT_DP_OUTSIDE_INTERNAL.bed

echo "STEP 6: DONE";

# STEP 7: FILTER THE ABOVE WINDOW OUTPUT --> KEEP THE 'INTERNAL' ELEMENTS THAT DO NOT HAVE ANY PBS OR PPT CLOSE TO THEM, ALSO KEEP OPRHAN AND PROXIMAL ELEMENTS

Rscript scripts/window2_2_clean_prox_orphan.R $1.ALL_PBSPPT_DP_OUTSIDE_INTERNAL.bed $1.ALL.PBSPPT_DP_OUTSIDE_INTERNAL_REJECTED.bed $1.ALL.PBSPPT_DP_WINDOW2_SORTED.bed $1.ALL.PBSNPPT_DP_OUTSIDE_INTERNAL_CLEAN.bed $1.PBSNPPT_D_OUTSIDE_INTERNAL_CLEAN.bed $1.PPTNPBS_P_OUTSIDE_INTERNAL_CLEAN.bed $1.ALL.PBSNPPT_DP_OUTSIDE_INTERNAL_PROXIMAL_ELEMENTS.bed $1.ALL.PBSNPPT_DP_OUTSIDE_INTERNAL_ORPHAN_OLIGOMERS.bed

echo "STEP 7: DONE";

# STEP 8: EXTEND 'INTERNALS' AND SEPARATE D AND P STRANDS FOR THE SEARCHING OF START/END OLIGOMERS WITH VMATCH

Rscript scripts/extended_startend_oligos.R $1.ALL.PBSNPPT_DP_OUTSIDE_INTERNAL_CLEAN.bed $5 $1.ALL.PBSNPPT_D_EXTENDED_INTERNAL_CLEAN.bed $1.ALL.PBSNPPT_P_EXTENDED_INTERNAL_CLEAN.bed $6 $1.ALL.PBSNPPT_D_POTENTIAL_STARTS.bed $1.ALL.PBSNPPT_D_POTENTIAL_ENDS.bed $1.ALL.PBSNPPT_P_POTENTIAL_STARTS.bed $1.ALL.PBSNPPT_P_POTENTIAL_ENDS.bed

cat $1.ALL.PBSNPPT_D_EXTENDED_INTERNAL_CLEAN.bed $1.ALL.PBSNPPT_P_EXTENDED_INTERNAL_CLEAN.bed > $1.ALL.PBSNPPT_DP_EXTENDED_INTERNAL_CLEAN.bed

echo "STEP 8: DONE";

# STEP 9: GET THE FASTA SEQUENCES (BEDTOOLS) BY USING THE BED FILES FROM THE PREVIOUS STEP (INTERNAL AND EXTENDED)

# D
bedtools getfasta -fi $1 -bed $1.PBSNPPT_D_OUTSIDE_INTERNAL_CLEAN.bed -fo $1_ATHILA_OUTSIDE_D_ELEMENTS.fasta

bedtools getfasta -fi $1 -bed $1.ALL.PBSNPPT_D_EXTENDED_INTERNAL_CLEAN.bed -fo $1_ATHILA_EXTENDED_D_ELEMENTS.fasta

bedtools getfasta -fi $1 -bed $1.ALL.PBSNPPT_D_POTENTIAL_STARTS.bed -name -fo $1.ALL.PBSNPPT_D_POTENTIAL_STARTS.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.ALL.PBSNPPT_D_POTENTIAL_STARTS.fasta | tail -n+2 > $1.ALL.PBSNPPT_D_POTENTIAL_STARTS.txt

python3 scripts/keep_unique_seqs.py $1.ALL.PBSNPPT_D_POTENTIAL_STARTS.fasta $1.ALL.PBSNPPT_D_POTENTIAL_STARTS_UNIQUE.fasta

bedtools getfasta -fi $1 -bed $1.ALL.PBSNPPT_D_POTENTIAL_ENDS.bed -name -fo $1.ALL.PBSNPPT_D_POTENTIAL_ENDS.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.ALL.PBSNPPT_D_POTENTIAL_ENDS.fasta | tail -n+2 > $1.ALL.PBSNPPT_D_POTENTIAL_ENDS.txt

python3 scripts/keep_unique_seqs.py $1.ALL.PBSNPPT_D_POTENTIAL_ENDS.fasta $1.ALL.PBSNPPT_D_POTENTIAL_ENDS_UNIQUE.fasta

# P
bedtools getfasta -fi $1 -bed $1.PPTNPBS_P_OUTSIDE_INTERNAL_CLEAN.bed -fo $1_ATHILA_OUTSIDE_P_ELEMENTS.fasta

python3 scripts/revcom_auto.py $1_ATHILA_OUTSIDE_P_ELEMENTS.fasta

bedtools getfasta -fi $1 -bed $1.ALL.PBSNPPT_P_EXTENDED_INTERNAL_CLEAN.bed -fo $1_ATHILA_EXTENDED_P_ELEMENTS.fasta

python3 scripts/revcom_auto.py $1_ATHILA_EXTENDED_P_ELEMENTS.fasta

bedtools getfasta -fi $1 -bed $1.ALL.PBSNPPT_P_POTENTIAL_STARTS.bed -name -fo $1.ALL.PBSNPPT_P_POTENTIAL_STARTS.fasta

python3 scripts/revcom_auto.py $1.ALL.PBSNPPT_P_POTENTIAL_STARTS.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.ALL.PBSNPPT_P_POTENTIAL_STARTS.fasta_sl.fasta | tail -n+2 > $1.ALL.PBSNPPT_P_POTENTIAL_STARTS.fasta_sl.txt

python3 scripts/keep_unique_seqs.py $1.ALL.PBSNPPT_P_POTENTIAL_STARTS.fasta_sl.fasta $1.ALL.PBSNPPT_P_POTENTIAL_STARTS.fasta_sl_UNIQUE.fasta

bedtools getfasta -fi $1 -bed $1.ALL.PBSNPPT_P_POTENTIAL_ENDS.bed -name -fo $1.ALL.PBSNPPT_P_POTENTIAL_ENDS.fasta

python3 scripts/revcom_auto.py $1.ALL.PBSNPPT_P_POTENTIAL_ENDS.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.ALL.PBSNPPT_P_POTENTIAL_ENDS.fasta_sl.fasta | tail -n+2 > $1.ALL.PBSNPPT_P_POTENTIAL_ENDS.fasta_sl.txt

python3 scripts/keep_unique_seqs.py $1.ALL.PBSNPPT_P_POTENTIAL_ENDS.fasta_sl.fasta $1.ALL.PBSNPPT_P_POTENTIAL_ENDS.fasta_sl_UNIQUE.fasta

cat $1_ATHILA_OUTSIDE_D_ELEMENTS.fasta $1_ATHILA_OUTSIDE_P_ELEMENTS.fasta_sl.fasta > $1_ATHILA_OUTSIDE_DP_ELEMENTS.fasta

cat $1.ALL.PBSNPPT_D_POTENTIAL_STARTS.txt $1.ALL.PBSNPPT_P_POTENTIAL_STARTS.fasta_sl.txt > $1.ALL.PBSNPPT_DP_POTENTIAL_STARTS.txt

cat $1.ALL.PBSNPPT_D_POTENTIAL_ENDS.txt $1.ALL.PBSNPPT_P_POTENTIAL_ENDS.fasta_sl.txt > $1.ALL.PBSNPPT_DP_POTENTIAL_ENDS.txt

# cat $1.ALL.PBSNPPT_D_EXTENDED_INTERNAL_CLEAN.bed $1.ALL.PBSNPPT_P_EXTENDED_INTERNAL_CLEAN.bed > $1.ALL.PBSNPPT_DP_EXTENDED_INTERNAL_CLEAN.bed 

echo "STEP 9: DONE";

# STEP 10: RUN VMATCH TO FIND THE START/END OLIGOMERS

# D
mkvtree -dna -pl 6 -allout -db $1_ATHILA_EXTENDED_D_ELEMENTS.fasta

vmatch -q $1.ALL.PBSNPPT_D_POTENTIAL_STARTS_UNIQUE.fasta -complete -h $7 -d -s -v -showdesc 100 -noevalue -noidentity -noscore $1_ATHILA_EXTENDED_D_ELEMENTS.fasta > $1_ATHILA_SPECIFIC_START_D_mis$7.vmatch

vmatch -q $1.ALL.PBSNPPT_D_POTENTIAL_ENDS_UNIQUE.fasta -complete -h $7 -d -s -v -showdesc 100 -noevalue -noidentity -noscore $1_ATHILA_EXTENDED_D_ELEMENTS.fasta > $1_ATHILA_SPECIFIC_END_D_mis$7.vmatch

# P
mkvtree -dna -pl 6 -allout -db $1_ATHILA_EXTENDED_P_ELEMENTS.fasta_sl.fasta

vmatch -q $1.ALL.PBSNPPT_P_POTENTIAL_STARTS.fasta_sl_UNIQUE.fasta -complete -h $7 -d -s -v -showdesc 100 -noevalue -noidentity -noscore $1_ATHILA_EXTENDED_P_ELEMENTS.fasta_sl.fasta > $1_ATHILA_SPECIFIC_START_P_mis$7.vmatch

vmatch -q $1.ALL.PBSNPPT_P_POTENTIAL_ENDS.fasta_sl_UNIQUE.fasta -complete -h $7 -d -s -v -showdesc 100 -noevalue -noidentity -noscore $1_ATHILA_EXTENDED_P_ELEMENTS.fasta_sl.fasta > $1_ATHILA_SPECIFIC_END_P_mis$7.vmatch

echo "STEP 10: DONE";

# STEP 11: ANALYSE VMATCH OUTPUTS TO GET THE FULL-LENGTH ELEMENTS. SEARCH FOR START AND END 20MERS IN SPECIFIC "LTR" REGIONS. MAXIMUM OR MINIMUM (LAST) PARAMETER TAKES THE FIRST OR LAST START/END OLIGOMER IN LTRS

Rscript scripts/vmatch2_2_fulllengthbed_element_specific_start_end_DP_terminal.R $1_ATHILA_SPECIFIC_START_D_mis$7.vmatch $1_ATHILA_SPECIFIC_START_P_mis$7.vmatch $8 $9 $1.ALL.PBSNPPT_DP_POTENTIAL_STARTS.txt $1_ATHILA_SPECIFIC_END_D_mis$7.vmatch $1_ATHILA_SPECIFIC_END_P_mis$7.vmatch $1.ALL.PBSNPPT_DP_POTENTIAL_ENDS.txt $1.D_FULLLENGTH.bed $1.P_FULLLENGTH.bed $1.ALL.PBSNPPT_DP_EXTENDED_INTERNAL_CLEAN.bed $1.ALL.PBSNPPT_DP_EXTENDED_INTERNAL_CLEAN_REJECTED.bed 

cat $1.D_FULLLENGTH.bed $1.P_FULLLENGTH.bed > $1.DP_FULLLENGTH.bed

sort -k1,1V $1.DP_FULLLENGTH.bed > $1.DP_FULLLENGTH_SORTED.bed

echo "STEP 11: DONE";

# STEP 12: MAKE BED FILES FOR THE 5', 3' LTRs AND THE INTERNAL REGIONS

Rscript scripts/get_ltr_internal_bed.R $1.ALL.PBSNPPT_D_EXTENDED_INTERNAL_CLEAN.bed $1.D_FULLLENGTH.bed $1.D_5LTR.bed $1.D_3LTR.bed $1.D_INTERNAL.bed $1.ALL.PBSNPPT_P_EXTENDED_INTERNAL_CLEAN.bed $1.P_FULLLENGTH.bed $1.P_5LTR.bed $1.P_3LTR.bed $1.P_INTERNAL.bed

echo "STEP 12: DONE";

# STEP 13: GET THE FASTA SEQUENCES (BEDTOOLS) FOR THE FULL-LENGTH, 5', 3' LTRs AND THE INTERNAL REGIONS, ALSO RENAME THEM AND CONCATENATE ALL THE REJECTED ELEMENTS FROM THE PREVIOUS STEPS

bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH.bed -fo $1.D_FULLLENGTH.fasta

bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH.bed -fo $1.P_FULLLENGTH.fasta

python3 scripts/revcom_auto2.py $1.P_FULLLENGTH.fasta

bedtools getfasta -fi $1 -bed $1.D_5LTR.bed -fo $1.D_5LTR.fasta

bedtools getfasta -fi $1 -bed $1.D_3LTR.bed -fo $1.D_3LTR.fasta

bedtools getfasta -fi $1 -bed $1.D_INTERNAL.bed -fo $1.D_INTERNAL.fasta

bedtools getfasta -fi $1 -bed $1.P_5LTR.bed -fo $1.P_5LTR.fasta

python3 scripts/revcom_auto2.py $1.P_5LTR.fasta

bedtools getfasta -fi $1 -bed $1.P_3LTR.bed -fo $1.P_3LTR.fasta

python3 scripts/revcom_auto2.py $1.P_3LTR.fasta

bedtools getfasta -fi $1 -bed $1.P_INTERNAL.bed -fo $1.P_INTERNAL.fasta

python3 scripts/revcom_auto2.py $1.P_INTERNAL.fasta

cat $1.D_5LTR.fasta $1.P_5LTR.fasta_sl.fasta > $1.DP_5LTR.fasta

cat $1.D_3LTR.fasta $1.P_3LTR.fasta_sl.fasta > $1.DP_3LTR.fasta

cat $1.D_INTERNAL.fasta $1.P_INTERNAL.fasta_sl.fasta > $1.DP_INTERNAL.fasta

cat $1.D_FULLLENGTH.fasta $1.P_FULLLENGTH.fasta_sl.fasta > $1.DP_FULLLENGTH.fasta

cat $1.D_5LTR.bed $1.P_5LTR.bed > $1.DP_5LTR.bed

cat $1.D_3LTR.bed $1.P_3LTR.bed > $1.DP_3LTR.bed

cat $1.D_INTERNAL.bed $1.P_INTERNAL.bed > $1.DP_INTERNAL.bed

Rscript scripts/fix_names.R $1.DP_FULLLENGTH.bed ${10} $1.DP_FULLLENGTH_RENAME.txt $1.DP_FULLLENGTH_RENAMED.bed $1.D_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.bed $1.P_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.bed $1.D_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.bed $1.P_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.bed $1.DP_5LTR.bed $1.DP_5LTR_RENAME.txt $1.DP_5LTR_RENAMED.bed $1.DP_3LTR.bed $1.DP_3LTR_RENAME.txt $1.DP_3LTR_RENAMED.bed $1.DP_INTERNAL.bed $1.DP_INTERNAL_RENAME.txt $1.DP_INTERNAL_RENAMED.bed

perl scripts/rename.pl $1.DP_FULLLENGTH_RENAME.txt $1.DP_FULLLENGTH.fasta > $1.DP_FULLLENGTH_RENAMED.fasta

perl scripts/rename.pl $1.DP_5LTR_RENAME.txt $1.DP_5LTR.fasta > $1.DP_5LTR_RENAMED.fasta

perl scripts/rename.pl $1.DP_3LTR_RENAME.txt $1.DP_3LTR.fasta > $1.DP_3LTR_RENAMED.fasta

perl scripts/rename.pl $1.DP_INTERNAL_RENAME.txt $1.DP_INTERNAL.fasta > $1.DP_INTERNAL_RENAMED.fasta

# cat $1.DP_5LTR_RENAMED.fasta $1.DP_3LTR_RENAMED.fasta > $1.DP_OUR_LTR_RENAMED.fasta

cat $1.PBSPPT_DP_REJECTED.bed $1.INTERSECT_DP_2_PD_REJECTED.bed $1.ALL.PBSPPT_DP_OUTSIDE_INTERNAL_REJECTED.bed $1.ALL.PBSNPPT_DP_EXTENDED_INTERNAL_CLEAN_REJECTED.bed > $1.ALL.DP_REJECTED_ELEMENTS.bed

echo "STEP 13: DONE";

# STEP 14: MASK FULL-LENGTH ELEMENTS IN THE GENOME AND RUN BLAST TO FIND OTHER POTENTIAL FULL-LENGTH ELEMENTS AND SEARCH FOR PBS AND PPT SIGNATURES IN ORDER TO FIND THE LTR AND THE INTERNAL DOMAINS OF THESE ATHILA ELEMENTS

awk 'BEGIN{FS="[> ]"} /^>/{val=$2;next}  {print val"\t"length($0)}' $1.DP_FULLLENGTH_RENAMED.fasta > $1.DP_FULLLENGTH_RENAMED_LENGTH.txt

bedtools maskfasta -fi $1 -bed $1.DP_FULLLENGTH_RENAMED.bed -fo $1_masked.fasta

makeblastdb -dbtype nucl -in $1_masked.fasta

blastall -p blastn -i $1.DP_FULLLENGTH_RENAMED.fasta -d $1_masked.fasta -e 10e-180 -F F -a 7 -m 8 > $1.FL_AGAINST_MG_BLAST_OUTPUT.txt

Rscript scripts/blast_output_analysis.R $1.FL_AGAINST_MG_BLAST_OUTPUT.txt $1.DP_FULLLENGTH_RENAMED_LENGTH.txt ${11} ${10} $1.D_FULLLENGTH_BLAST_NONOVERLAPPING.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING.bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.bed $1.DP_FULLLENGTH_BLAST_OVERLAPPING.bed

cat $1.D_FULLLENGTH_BLAST_NONOVERLAPPING.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING.bed > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING.bed

sort -k1,1V $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING.bed > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SORTED.bed

bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING.bed -name -fo $1.D_FULLLENGTH_BLAST_NONOVERLAPPING.fasta

bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING.bed -name -fo $1.P_FULLLENGTH_BLAST_NONOVERLAPPING.fasta

python3 scripts/revcom_auto2.py $1.P_FULLLENGTH_BLAST_NONOVERLAPPING.fasta

cat $1.D_FULLLENGTH_BLAST_NONOVERLAPPING.fasta $1.P_FULLLENGTH_BLAST_NONOVERLAPPING.fasta_sl.fasta > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING.fasta

mkvtree -dna -pl 5 -allout -v -db $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING.fasta

vmatch -q inputs/ATHILA_PBSjunction -complete -h 8 -d -p -s -v -showdesc 100 -noevalue -noidentity -noscore $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING.fasta > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_PBS.vmatch

vmatch -q inputs/ATHILA_PPTjunction -complete -h 8 -d -p -s -v -showdesc 100 -noevalue -noidentity -noscore $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING.fasta > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_PPT.vmatch

awk 'BEGIN{FS="[> ]"} /^>/{val=$2;next}  {print val"\t"length($0)}' $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING.fasta > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_LENGTH.txt

# Rscript scripts/vmatch_fl_blast.R $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_LENGTH.txt $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_PBS.vmatch ${12} ${13} $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_PPT.vmatch ${14} ${15} ${10} $1.D_5LTR_BLAST_NONOVERLAPPING.bed $1.D_3LTR_BLAST_NONOVERLAPPING.bed $1.D_INTERNAL_BLAST_NONOVERLAPPING.bed $1.P_5LTR_BLAST_NONOVERLAPPING.bed $1.P_3LTR_BLAST_NONOVERLAPPING.bed $1.P_INTERNAL_BLAST_NONOVERLAPPING.bed

Rscript scripts/vmatch_fl_blast_ext_pos_st_en.R $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_LENGTH.txt $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_PBS.vmatch ${12} ${13} $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_PPT.vmatch ${14} ${15} ${10} $6 $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.bed

echo "STEP 14a: DONE";

# STEP 14b: GET THE FASTA SEQUENCES (BEDTOOLS) BY USING THE BED FILES FROM THE PREVIOUS STEP (INTERNAL AND EXTENDED)

# D
bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.bed -fo $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.fasta

bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.bed -fo $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta

bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.bed -name -fo $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta | tail -n+2 > $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.txt

python3 scripts/keep_unique_seqs.py $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS_UNIQUE.fasta

bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.bed -name -fo $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta | tail -n+2 > $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.txt

python3 scripts/keep_unique_seqs.py $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS_UNIQUE.fasta

# P
bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.bed -fo $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.fasta

python3 scripts/revcom_auto.py $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.fasta

bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.bed -fo $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta

python3 scripts/revcom_auto.py $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta

bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.bed -name -fo $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta

python3 scripts/revcom_auto.py $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta_sl.fasta | tail -n+2 > $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta_sl.txt

python3 scripts/keep_unique_seqs.py $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta_sl.fasta $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta_sl_UNIQUE.fasta

bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.bed -name -fo $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta

python3 scripts/revcom_auto.py $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta_sl.fasta | tail -n+2 > $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta_sl.txt

python3 scripts/keep_unique_seqs.py $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta_sl.fasta $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta_sl_UNIQUE.fasta

cat $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.fasta $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.fasta_sl.fasta > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.fasta

cat $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.txt $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta_sl.txt > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.txt

cat $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.txt $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta_sl.txt > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.txt

cat $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.bed > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.bed

cat $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta_sl.fasta > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta

awk 'BEGIN{FS="[> ]"} /^>/{val=$2;next}  {print val"\t"length($0)}' $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED_LENGTH.txt

echo "STEP 14b: DONE";

# STEP 14c: RUN VMATCH TO FIND THE START/END OLIGOMERS

# D
mkvtree -dna -pl 6 -allout -db $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta

vmatch -q $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta -complete -h ${16} -d -s -v -showdesc 100 -noevalue -noidentity -noscore $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta > $1_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_START_D_mis${16}.vmatch

vmatch -q $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta -complete -h ${16} -d -s -v -showdesc 100 -noevalue -noidentity -noscore $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta > $1_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_END_D_mis${16}.vmatch

# P
mkvtree -dna -pl 6 -allout -db $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta_sl.fasta

vmatch -q $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_STARTS.fasta_sl.fasta -complete -h ${16} -d -s -v -showdesc 100 -noevalue -noidentity -noscore $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta_sl.fasta > $1_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_START_P_mis${16}.vmatch

vmatch -q $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_POTENTIAL_ENDS.fasta_sl.fasta -complete -h ${16} -d -s -v -showdesc 100 -noevalue -noidentity -noscore $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED.fasta_sl.fasta > $1_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_END_P_mis${16}.vmatch

echo "STEP 14c: DONE";

# STEP 14d: ANALYSE VMATCH OUTPUTS TO GET THE FULL-LENGTH ELEMENTS. SEARCH FOR START AND END 20MERS IN SPECIFIC "LTR" REGIONS. MAXIMUM OR MINIMUM (LAST) PARAMETER TAKES THE FIRST OR LAST START/END OLIGOMER IN LTRS

Rscript scripts/vmatch2_2_fulllengthbed_element_specific_start_end_DP_terminal_blast.R $1_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_START_D_mis${16}.vmatch $1_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_START_P_mis${16}.vmatch $8 $9 $1_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_END_D_mis${16}.vmatch $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_EXTENDED_LENGTH.txt $1_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_END_P_mis${16}.vmatch ${10} $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed

cat $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed

rm $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed

rm $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed

Rscript scripts/get_all_fl.R $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING.bed $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS_COMPLETE.bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed

sort -k1,1V $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS_SORTED.bed

echo "STEP 14d: DONE";

# STEP 14e: MAKE BED FILES FOR THE 5', 3' LTRs AND THE INTERNAL REGIONS

Rscript scripts/get_ltr_internal_bed_blast.R $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.D_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.D_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.D_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_INTERNAL.bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.P_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.P_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.P_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed

echo "STEP 14e: DONE";

# STEP 14f: GET THE FASTA SEQUENCES (BEDTOOLS) FOR THE FULL-LENGTH, 5', 3' LTRs AND THE INTERNAL REGIONS, ALSO RENAME THEM AND CONCATENATE ALL THE REJECTED ELEMENTS FROM THE PREVIOUS STEPS

bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed -name -fo $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed -name -fo $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

python3 scripts/revcom_auto2.py $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

bedtools getfasta -fi $1 -bed $1.D_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed -name -fo $1.D_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

bedtools getfasta -fi $1 -bed $1.D_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed -name -fo $1.D_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

bedtools getfasta -fi $1 -bed $1.D_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed -name -fo $1.D_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

bedtools getfasta -fi $1 -bed $1.P_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed -name -fo $1.P_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

python3 scripts/revcom_auto2.py $1.P_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

bedtools getfasta -fi $1 -bed $1.P_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed -name -fo $1.P_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

python3 scripts/revcom_auto2.py $1.P_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

bedtools getfasta -fi $1 -bed $1.P_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed -name -fo $1.P_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

python3 scripts/revcom_auto2.py $1.P_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

cat $1.D_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta $1.P_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta_sl.fasta > $1.DP_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

cat $1.D_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta $1.P_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta_sl.fasta > $1.DP_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

cat $1.D_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta $1.P_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta_sl.fasta > $1.DP_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

cat $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta_sl.fasta > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta

cat $1.D_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.P_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed > $1.DP_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed

cat $1.D_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.P_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed > $1.DP_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed

cat $1.D_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.P_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed > $1.DP_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed

awk 'BEGIN{FS=OFS="\t"}{$7=""; sub("\t\t","\t")}1' $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed > $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS_NEW.bed

sort -k1,1V $1.DP_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed > $1.DP_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS_SORTED.bed

cat $1.DP_INTERNAL_RENAMED.fasta $1.DP_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta > $1.DP_INTERNAL_BLAST_TOGETHER.fasta

cat $1.DP_5LTR_RENAMED.fasta $1.DP_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta > $1.DP_5LTR_BLAST_TOGETHER.fasta

cat $1.DP_3LTR_RENAMED.fasta $1.DP_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta > $1.DP_3LTR_BLAST_TOGETHER.fasta

cat $1.DP_FULLLENGTH_RENAMED.fasta $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.fasta > $1.DP_FULLLENGTH_BLAST_TOGETHER.fasta

cat $1.DP_5LTR_BLAST_TOGETHER.fasta $1.DP_3LTR_BLAST_TOGETHER.fasta > $1.DP_ALLLTR_BLAST_TOGETHER.fasta

cat $1.DP_5LTR_RENAMED.bed $1.DP_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed > $1.DP_5LTR_BLAST_TOGETHER.bed

cat $1.DP_3LTR_RENAMED.bed $1.DP_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed > $1.DP_3LTR_BLAST_TOGETHER.bed

cat $1.DP_INTERNAL_RENAMED.bed $1.DP_INTERNAL_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed > $1.DP_INTERNAL_BLAST_TOGETHER.bed

cat $1.DP_FULLLENGTH_RENAMED.bed $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS_NEW.bed > $1.DP_FULLLENGTH_BLAST_TOGETHER.bed

awk 'BEGIN{FS="[> ]"} /^>/{val=$2;next}  {print val"\t"length($0)}' $1.DP_5LTR_BLAST_TOGETHER.fasta > $1.DP_5LTR_BLAST_TOGETHER_LENGTH.txt

echo "STEP 14f: DONE";

# STEP 15: MASK ALL THE FULL-LENGTH ELEMENTS IN THE GENOME AND RUN BLAST TO FIND POTENTIAL SOLO LTRs, ALSO CHECK (VMATCH) IF THERE ARE PBSs AND PPTs UPSTREAM/DOWNSTREAM OR INSIDE THESE ELEMENTS 

# awk 'BEGIN{FS="[> ]"} /^>/{val=$2;next}  {print val"\t"length($0)}' $1.DP_5LTR_RENAMED.fasta > $1.DP_5LTR_RENAMED_LENGTH.txt

bedtools maskfasta -fi $1 -bed $1.DP_FULLLENGTH_BLAST_TOGETHER.bed -fo $1_all_fulllength_masked.fasta

makeblastdb -dbtype nucl -in $1_all_fulllength_masked.fasta

blastall -p blastn -i $1.DP_5LTR_BLAST_TOGETHER.fasta -d $1_all_fulllength_masked.fasta -e 10e-180 -F F -a 7 -m 8 > $1.ALL_5LTR_AGAINST_MG_BLAST_OUTPUT_SOLO_LTR.txt

Rscript scripts/blast_output_analysis_soloLTR.R $1.ALL_5LTR_AGAINST_MG_BLAST_OUTPUT_SOLO_LTR.txt $1.DP_5LTR_BLAST_TOGETHER_LENGTH.txt ${17} ${10} $1.D_SOLO_LTR_BLAST_NONOVERLAPPING.bed $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.bed $1.P_SOLO_LTR_BLAST_NONOVERLAPPING.bed $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.bed $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.bed $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.bed $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.bed $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.bed

cat $1.D_SOLO_LTR_BLAST_NONOVERLAPPING.bed $1.P_SOLO_LTR_BLAST_NONOVERLAPPING.bed > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING.bed

cat $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.bed $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.bed > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.bed

sort -k1,1V $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING.bed > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_SORTED.bed

sort -k1,1V $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.bed > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_SORTED.bed

bedtools getfasta -fi $1 -bed $1.D_SOLO_LTR_BLAST_NONOVERLAPPING.bed -name -fo $1.D_SOLO_LTR_BLAST_NONOVERLAPPING.fasta

bedtools getfasta -fi $1 -bed $1.P_SOLO_LTR_BLAST_NONOVERLAPPING.bed -name -fo $1.P_SOLO_LTR_BLAST_NONOVERLAPPING.fasta

python3 scripts/revcom_auto2.py $1.P_SOLO_LTR_BLAST_NONOVERLAPPING.fasta

bedtools getfasta -fi $1 -bed $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.bed -name -fo $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.fasta

bedtools getfasta -fi $1 -bed $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.bed -name -fo $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.fasta

python3 scripts/revcom_auto2.py $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.fasta

cat $1.D_SOLO_LTR_BLAST_NONOVERLAPPING.fasta $1.P_SOLO_LTR_BLAST_NONOVERLAPPING.fasta_sl.fasta > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING.fasta

cat $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.fasta $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.fasta_sl.fasta > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.fasta

mkvtree -dna -pl 7 -allout -v -db $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.fasta

vmatch -q inputs/ATHILA_PBSjunction -complete -h 5 -d -p -s -v -showdesc 100 -noevalue -noidentity -noscore $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.fasta > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_PBS.vmatch

vmatch -q inputs/ATHILA_PPTjunction -complete -h 5 -d -p -s -v -showdesc 100 -noevalue -noidentity -noscore $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS.fasta > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_PPT.vmatch

Rscript scripts/vmatch_solo.R $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_PBS.vmatch $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_PBS.txt

Rscript scripts/vmatch_solo.R $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_PPT.vmatch $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_PPT.txt

cat $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_PBS.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_PPT.txt > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TO_DELETE_PBSPPT.txt

python3 scripts/remove_prime_solo.py $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING.fasta $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TO_DELETE_PBSPPT.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_CLEAR_PBSPPT_ml.fasta

awk '/^>/ { if(NR>1) print "";  printf("%s\n",$0); next; } { printf("%s",$0);}  END {printf("\n");}' $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_CLEAR_PBSPPT_ml.fasta > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_CLEAR_PBSPPT.fasta

awk 'NR == FNR {a[$1]; next} !($4 in a)' $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TO_DELETE_PBSPPT.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING.bed > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_CLEAR_PBSPPT.bed 

echo "STEP 15: DONE";

# STEP 16: TAKE THE TSDs AND MAKE A TABLE WITH THEIR INFORMATION [FULL-LENGTH ID, UPSTREAM 5MER, DOWNSTREAM 5MER, SAME TDS Y/N, TSD SEQUENCE]

bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.bed -name -fo $1.D_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.D_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.fasta | tail -n+2 > $1.D_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.txt

bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.bed -name -fo $1.D_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.D_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.fasta | tail -n+2 > $1.D_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.txt

bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.bed -name -fo $1.P_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.fasta

python3 scripts/revcom_auto2.py $1.P_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.P_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.fasta_sl.fasta | tail -n+2 > $1.P_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.fasta_sl.txt

bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.bed -name -fo $1.P_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.fasta

python3 scripts/revcom_auto2.py $1.P_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.P_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.fasta_sl.fasta | tail -n+2 > $1.P_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.fasta_sl.txt



bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.bed -name -fo $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta | tail -n+2 > $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.txt

bedtools getfasta -fi $1 -bed $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.bed -name -fo $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta | tail -n+2 > $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.txt

bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.bed -name -fo $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta

python3 scripts/revcom_auto2.py $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta_sl.fasta | tail -n+2 > $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta_sl.txt

bedtools getfasta -fi $1 -bed $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.bed -name -fo $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta

python3 scripts/revcom_auto2.py $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta_sl.fasta | tail -n+2 > $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta_sl.txt



bedtools getfasta -fi $1 -bed $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.bed -name -fo $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta | tail -n+2 > $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.txt

bedtools getfasta -fi $1 -bed $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.bed -name -fo $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta | tail -n+2 > $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.txt

bedtools getfasta -fi $1 -bed $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.bed -name -fo $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta

python3 scripts/revcom_auto2.py $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta_sl.fasta | tail -n+2 > $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta_sl.txt

bedtools getfasta -fi $1 -bed $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.bed -name -fo $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta

python3 scripts/revcom_auto2.py $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta

awk 'BEGIN{RS=">"}{print ""$1"\t"$2;}' $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta_sl.fasta | tail -n+2 > $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta_sl.txt



Rscript scripts/tsd_analysis.R $1.D_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.txt $1.D_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.txt $1.P_FULLLENGTH_NEW_PLUS_TSD_LEFTV2.fasta_sl.txt $1.P_FULLLENGTH_NEW_PLUS_TSD_RIGHTV3.fasta_sl.txt $1.DP_FULLLENGTH_TSD_TABLE.txt $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.txt $1.D_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.txt $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta_sl.txt $1.P_FULLLENGTH_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta_sl.txt $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_TSD_TABLE.txt $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.txt $1.D_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.txt $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_LEFTV2.fasta_sl.txt $1.P_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TSD_RIGHTV3.fasta_sl.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD.txt

awk 'NR == FNR {a[$1]; next} !($1 in a)' $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TO_DELETE_PBSPPT.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD.txt > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD_CLEAR_PBSPPT.txt

awk 'NR == FNR {a[$1]; next} !($1 in a)' $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TO_DELETE_PBSPPT.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD.txt > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD_CLEAR_PBSPPT.txt

awk -F '\t' '{print $1}' $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD_CLEAR_PBSPPT.txt > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD_CLEAR_PBSPPT_TO_FASTA.txt

awk -F '\t' '{print $1}' $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD_CLEAR_PBSPPT.txt > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD_CLEAR_PBSPPT_TO_FASTA.txt

grep -w -A 1 -f $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD_CLEAR_PBSPPT_TO_FASTA.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_CLEAR_PBSPPT.fasta --no-group-separator > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD_CLEAR_PBSPPT.fasta

grep -w -A 1 -f $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD_CLEAR_PBSPPT_TO_FASTA.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_CLEAR_PBSPPT.fasta --no-group-separator > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD_CLEAR_PBSPPT.fasta

awk 'NR == FNR {a[$1]; next} ($4 in a)' $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_CLEAR_PBSPPT.bed  > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD_CLEAR_PBSPPT.bed

awk 'NR == FNR {a[$1]; next} ($4 in a)' $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_CLEAR_PBSPPT.bed  > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD_CLEAR_PBSPPT.bed

cat $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD_CLEAR_PBSPPT.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD_CLEAR_PBSPPT.txt > $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_ALL_TSD_CLEAR_PBSPPT.txt

cat $1.DP_FULLLENGTH_TSD_TABLE.txt $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_TSD_TABLE.txt > $1.DP_FULLLENGTH_BLAST_TOGETHER_TSD_TABLE.txt

cat $1.DP_FULLLENGTH_TSD_TABLE.txt $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_TSD_TABLE.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_ALL_TSD_CLEAR_PBSPPT.txt > $1.DP_ULTIMATE_TSD_TABLE.txt

echo "STEP 16: DONE";

# STEP 17: RUN GETORF COMMAND FROM EMBOSS TO FIND THE ORFS IN THE INTERNAL DOMAIN OF ATHILA ELEMENTS

getorf -sequence $1.DP_INTERNAL_BLAST_TOGETHER.fasta -minsize 300 -noreverse -find 0 --outseq $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300

grep ">" $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300 | sed 's,>,,g' > $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_IDs.txt

awk '!/^>/ { printf "%s", $0; n = "\n" } /^>/ { print n $0; n = "" } END { printf "%s", n }' $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300 > $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta

echo "STEP 17: DONE";

# STEP 18: RUN HMMSCAN COMMAND FROM HMMER TO FIND THE HMMS IN ORFS OF THE INTERNAL DOMAINS OF ATHILA ELEMENTS

hmmpress -f inputs/${18} 

hmmscan -o $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19} --tblout $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.tbl --domtblout $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl --max -E ${19} --domE ${19} --incE ${19} --incdomE ${19} inputs/${18} $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta

grep NAME inputs/${18} | awk 'BEGIN {OFS="\t"};{print $2}' > ${18}_NAME.txt

grep LENG inputs/${18} | awk 'BEGIN {OFS="\t"};{print $2}' > ${18}_LENG.txt

paste ${18}_NAME.txt ${18}_LENG.txt > ${18}_NAME_AND_LENGTH.txt

rm ${18}_NAME.txt

rm ${18}_LENG.txt

echo "STEP 18: DONE";

# STEP 19: ANALYSE HMMSCAN OUTPUT

Rscript scripts/hmm_domtbl_analysis.R $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_HMM_AA.bed $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_IDs.txt ${18}_NAME_AND_LENGTH.txt $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_COUNT_TABLE.txt $1.DP_5LTR_BLAST_TOGETHER_LENGTH.txt ${10}_ $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_D_HMM_BED.bed $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_P_HMM_BED.bed $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_HMMTABLE.txt

bedtools getfasta -fi $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta -bed $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_HMM_AA.bed -name -fo $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_HMM_AA.fasta

cat $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_D_HMM_BED.bed $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_P_HMM_BED.bed > $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_DP_HMM_BED.bed

bedtools getfasta -fi $1 -bed $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_D_HMM_BED.bed -name -fo $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_D_HMM_FASTA.fasta

bedtools getfasta -fi $1 -bed $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_P_HMM_BED.bed -name -fo $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_P_HMM_FASTA.fasta

python3 scripts/revcom_auto2.py $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_P_HMM_FASTA.fasta

cat $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_D_HMM_FASTA.fasta $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_P_HMM_FASTA.fasta_sl.fasta > $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_DP_HMM_FASTA.fasta

python3 scripts/translate_dna.py $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_DP_HMM_FASTA.fasta

echo "STEP 19: DONE";

# STEP 20: PERCENTAGE IDENTITY SCORE

awk 'BEGIN{RS=">";OFS="\t"}NR>1{print $1,$2}' $1.DP_5LTR_BLAST_TOGETHER.fasta > $1.DP_5LTR_BLAST_TOGETHER.fasta_table.txt

awk 'BEGIN{RS=">";OFS="\t"}NR>1{print $1,$2}' $1.DP_3LTR_BLAST_TOGETHER.fasta > $1.DP_3LTR_BLAST_TOGETHER.fasta_table.txt

Rscript scripts/pid_athilas.R $1.DP_5LTR_BLAST_TOGETHER.fasta_table.txt $1.DP_3LTR_BLAST_TOGETHER.fasta_table.txt $1.DP_FULLLENGTH_BLAST_TOGETHER_PID1_TABLE.txt $1.DP_FULLLENGTH_BLAST_TOGETHER_PID2_TABLE.txt $1.DP_FULLLENGTH_BLAST_TOGETHER_PID3_TABLE.txt $1.DP_FULLLENGTH_BLAST_TOGETHER_PID4_TABLE.txt $1_pid1.png $1_pid2.png $1_pid3.png $1_pid4.png

echo "STEP 20: DONE";

# STEP 21: SUMMARY TABLES

Rscript scripts/summary_table.R $1.DP_FULLLENGTH_RENAMED.bed $1.DP_5LTR_RENAMED.bed $1.DP_3LTR_RENAMED.bed $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS_COMPLETE.bed $1.DP_5LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.DP_3LTR_BLAST_NONOVERLAPPING_SPECIFIC_ENDS.bed $1.DP_FULLLENGTH_BLAST_TOGETHER_PID1_TABLE.txt $1.DP_FULLLENGTH_BLAST_TOGETHER_PID2_TABLE.txt $1.DP_FULLLENGTH_BLAST_TOGETHER_PID3_TABLE.txt $1.DP_FULLLENGTH_BLAST_TOGETHER_PID4_TABLE.txt $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_CLEAR_PBSPPT.bed $1.DP_ULTIMATE_TSD_TABLE.txt ${10} $1.DP_FULLLENGTH_AND_SOLO_SUMMARY_TABLE.txt $1.DP_INTERNAL_BLAST_TOGETHER.fasta.ORF300_SL.fasta.hmmscanned.E${19}incE${19}.domtbl_HMMTABLE.txt $1.DP_FULLLENGTH_AND_HMM_SUMMARY_TABLE_ALLPID.txt

echo "STEP 21: DONE";

echo "DELETING MKVTREE AND OTHER FILES!!!"

rm *.al1

rm *.bck

rm *.bwt

rm *.des

rm *.fai

rm *.lcp

rm *.llv

rm *.ois

rm *.prj

rm *.sds

rm *.skp

rm *.ssp

rm *.sti1

rm *.suf

rm *.tis

rm *_masked.fasta

rm *_ml.fasta

rm *_FULL_D.bed

rm *_FULL_P.bed

rm *_UNIQUE.bed

rm *_r10k.txt

rm *_r10k_v.txt

rm *_l10k_v.txt

rm *.PBS_2_PPT_D_EVERYTHING.txt

rm *.PPT_2_PBS_P_EVERYTHING.txt

rm *.PBS_2_PPT_D_INTERSECT_NEW.bed

rm *.PPT_2_PBS_P_INTERSECT_NEW.bed

rm *.PBS_2_PPT_D_REJECTED.bed 

rm *.PPT_2_PBS_P_REJECTED.bed

rm *_DISTANCE.txt

rm *_INTERSECT.bed

rm *.INTERSECT_D_2_P.txt

rm *.INTERSECT_P_2_D.txt

rm *_FULL_DP.bed

rm *_SORTED.bed

rm $1.ALL.PBSNPPT_D_EXTENDED_INTERNAL_CLEAN.bed

rm $1.ALL.PBSNPPT_P_EXTENDED_INTERNAL_CLEAN.bed

rm *_POTENTIAL_STARTS.bed

rm *_POTENTIAL_STARTS.fasta

rm *_POTENTIAL_STARTS.txt

rm *.PBSNPPT_D_OUTSIDE_INTERNAL_CLEAN.bed

rm *.PPTNPBS_P_OUTSIDE_INTERNAL_CLEAN.bed

rm *_UNIQUE.fasta

rm *_POTENTIAL_ENDS.bed

rm *_POTENTIAL_ENDS.fasta

rm *_POTENTIAL_ENDS.txt

rm *_OUTSIDE_D_ELEMENTS.fasta

rm *_ELEMENTS.fasta

rm *_FULLLENGTH.bed

rm *_5LTR.bed

rm *_3LTR.bed

rm *_INTERNAL.bed

rm *_FULLLENGTH.fasta

rm *_5LTR.fasta

rm *_3LTR.fasta

rm *_INTERNAL.fasta

rm *_LEFTV2.bed

rm *_RIGHTV3.bed

rm *_LEFTV2.fasta

rm *_RIGHTV3.fasta

rm *_LEFTV2.txt

rm *_RIGHTV3.txt

rm *_RENAME.txt

rm *.nsq

rm *.nin

rm *.nhr

rm *.D_FULLLENGTH_BLAST_NONOVERLAPPING.bed

rm *.P_FULLLENGTH_BLAST_NONOVERLAPPING.bed

rm *.D_FULLLENGTH_BLAST_NONOVERLAPPING.fasta

rm *.P_FULLLENGTH_BLAST_NONOVERLAPPING.fasta

rm *_sl.fasta

# rm *.D_5LTR_BLAST_NONOVERLAPPING.bed

# rm *.D_3LTR_BLAST_NONOVERLAPPING.bed

# rm *.D_INTERNAL_BLAST_NONOVERLAPPING.bed

# rm *.P_5LTR_BLAST_NONOVERLAPPING.bed

# rm *.P_3LTR_BLAST_NONOVERLAPPING.bed

# rm *.P_INTERNAL_BLAST_NONOVERLAPPING.bed

# rm *.D_5LTR_BLAST_NONOVERLAPPING.fasta

# rm *.D_3LTR_BLAST_NONOVERLAPPING.fasta

# rm *.D_INTERNAL_BLAST_NONOVERLAPPING.fasta

# rm *.P_5LTR_BLAST_NONOVERLAPPING.fasta

# rm *.P_3LTR_BLAST_NONOVERLAPPING.fasta

# rm *.P_INTERNAL_BLAST_NONOVERLAPPING.fasta

rm *_LENGTH.txt

rm *.D_SOLO_LTR_BLAST_NONOVERLAPPING.bed

rm *.P_SOLO_LTR_BLAST_NONOVERLAPPING.bed

rm *.D_SOLO_LTR_BLAST_NONOVERLAPPING.fasta

rm *.P_SOLO_LTR_BLAST_NONOVERLAPPING.fasta

rm *_PLUS.bed

rm *_PLUS.fasta

rm *_PPT.txt

rm *_sl.txt

rm *.DP_FULLLENGTH_TSD_TABLE.txt

rm *.DP_FULLLENGTH_BLAST_NONOVERLAPPING_TSD_TABLE.txt

rm *.DP_SOLO_LTR_BLAST_NONOVERLAPPING_PLUS_TO_DELETE_PBSPPT.txt

rm *_TO_FASTA.txt

rm *.ORF300

rm *.tbl

rm *.E${19}incE${19}

rm inputs/*.h3p

rm inputs/*.h3m

rm inputs/*.h3i

rm inputs/*.h3f

rm *_D_HMM_BED.bed

rm *_P_HMM_BED.bed

rm *_D_HMM_FASTA.fasta

rm *_P_HMM_FASTA.fasta

rm *.fasta_table.txt

echo "MKVTREE AND OTHER FILES DELETED!!!"



echo "Assembly: $1";

echo "Searching Regions (bedtools window): $2";

echo "Minimum Internal Length: $3";

echo "Maximum Internal Length: $4";

echo "Extend Internal: $5";

echo "Length of Start/End Oligomers: $6";

echo "Mismatches of Start/End Oligomers: $7";

echo "Minimum LTR Length: $8";

echo "Maximum LTR Length: $9";

echo "Species code: ${10}";

echo "BLAST FULL-LENGTH Coverage (Minimum value): ${11}";

echo "BLAST Minimum Signature Coordinate: ${12}"

echo "BLAST Maximum Signature Coordinate: ${13}"

echo "BLAST PBS Signature Mismatches: ${14}"

echo "BLAST PPT Signature Mismatches: ${15}"

echo "Mismatches of Start/End Oligomers BLAST: ${16}";

echo "BLAST SOLO-LTR Coverage (Minimum value): ${17}";

echo "ORF HMM DATABASE: ${18}";

echo "HMMSCAN E-VALUE: ${19}";


a=($(wc $1.DP_FULLLENGTH_RENAMED.bed))

b=($(wc $1.DP_FULLLENGTH_BLAST_NONOVERLAPPING_SPECIFIC_ENDS_COMPLETE.bed))

c=($(wc $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITH_TSD_CLEAR_PBSPPT.bed))

d=($(wc $1.DP_SOLO_LTR_BLAST_NONOVERLAPPING_TSD_TABLE_WITHOUT_TSD_CLEAR_PBSPPT.bed))



echo "THANK YOU FOR USING ATHILAFINDER! YOU RETRIEVED ${a[0]} FULL-LENGTH ELEMENTS BASED ON THE FIRST PART OF THE SCRIPT AND ${b[0]} FULL-LENGTH ELEMENTS FROM THE BLAST STEP. IN ADDITION, ${c[0]} SOLO LTRs WITH TSDs AND ${d[0]} SOLO LTRs WITHOUT TSDs WERE FOUND."



mkdir ${10}_outputs

mv $1* ${10}_outputs

cd ${10}_outputs

mv $1 ..
